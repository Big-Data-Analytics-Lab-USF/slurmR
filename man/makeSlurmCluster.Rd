% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeSlurmCluster.R
\name{makeSlurmCluster}
\alias{makeSlurmCluster}
\alias{stopCluster.slurm_cluster}
\title{Create a Parallel Socket Cluster using Slurm}
\usage{
makeSlurmCluster(njobs, job_name = opts_sluRm$get_job_name(),
  tmp_path = opts_sluRm$get_tmp_path(), cluster_opt = list(),
  max_wait = 300L, verb = TRUE, ...)

\method{stopCluster}{slurm_cluster}(cl)
}
\arguments{
\item{njobs}{Integer. Number of jobs to use in the job-array. This specifies
the number of R sessions to initialize. This does not specify the number of
cores to be used.}

\item{job_name}{Character. Name of the job to be passed to \code{Slurm}.}

\item{tmp_path}{Character. Path to the directory where all the data (including
scripts) will be stored. Notice that this path must be accessible by all the
nodes in the network (See \link{opts_sluRm}).}

\item{cluster_opt}{A list of arguments passed to \link[parallel:makePSOCKcluster]{parallel::makePSOCKcluster}.}

\item{max_wait}{Integer scalar. Wait time before exiting with error while
trying to read the nodes information.}

\item{verb}{Logical scalar. If \code{TRUE}, the function will print messages on
screen reporting on the status of the job submission.}

\item{...}{Further arguments passed to \link{Slurm_EvalQ} via \code{sbatch_opt}.}

\item{cl}{An object of class \code{slurm_cluster}.}
}
\value{
A object of class \code{c("slurm_cluster", "SOCKcluster", "cluster")}. It
is the same as what is returned by \link[parallel:makePSOCKcluster]{parallel::makePSOCKcluster} with the main
difference that it has two extra attributes:
\itemize{
\item \code{SLURM_JOBID} Which is the id of the Job that initialized tha cluster.
\item \code{SLURM_PIDS} Which is an integer vector of the PIDs of the R processes that
the job started in the remote machines.
}
}
\description{
This function is essentially a wrapper of the function \link[parallel:makePSOCKcluster]{parallel::makePSOCKcluster}.
\code{makeSlurmCluster} main feature is adding node addresses.
}
\details{
By default, if the \code{time} option is not specified via \code{...},
then it is set to the value \code{01:00:00}, this is, 1 hour.

Once a job is submitted via Slurm, the user gets access to the nodes
associated with it, which allows users to star new processes within those.
By means of this, we can create PSOCK clusters accross nodes in a Slurm
enviornment. In particular, \code{makeSlurmCluster} performs the following steps:
\enumerate{
\item Using \link{Slurm_EvalQ}, a job is submitted using an array with \code{njobs}.
\item Each job within the array stores information regarding the node where they
are being executed, including the name of the node.
\item Create a PSOCK cluster using the node names obtained from the \code{Slurm_EvalQ}
call.
}

The method \code{stopCluster} for \code{slurm_cluster} stops the cluster doing
the following:
\itemize{
\item Then, calls the \code{stopCluster} method for \code{PSOCK} objects.
\item Cancel the Slurm job using \code{scancel}.
}
}
\examples{
\dontrun{

# Creating a cluster with 200 workers/offpring/child R sessions
cl <- makeSlurmCluster(200)

# Computing the mean of a 100 random uniforms within each worker
# for this we can use any of the function available in the parallel package.
ans <- parSapply(1:200, function(x) mean(runif(100)))

# We simply call stopCluster as we would do with any other cluster
# object
stopCluster(ans)

# We can also specify SBATCH options directly (...)
cl <- makeSlurmCluster(200, partition = "thomas", time = "02:00:00")
stopCluster(cl)
}

}
